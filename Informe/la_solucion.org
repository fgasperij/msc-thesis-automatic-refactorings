* Decisiones sobre la implementación

** ¿Por qué Smalltalk?

Necesitamos que sea un lenguaje orientado a objetos ya que vamos a estar
introduciendo refactorings que son propios de el diseño orientado a objetos. Un
lenguaje dinámico y puro permitirá iterar más rápidamente sobre la herramienta,
por lo tanto es ideal para la realización de un prototipo y nos permite explorar
con más soltura. Al ser un trabajo exploratorio no queríamos vernos limitados
por las particularidades de un lenguaje de programación o que las mayores
dificultades provengan de la navegación de una sintaxis compleja y
sobrecargada. Smalltalk cuenta con una sintaxis simple y al ser un lenguaje de
objetos puro y reflexivo provee la posibilidad de manipular los programas a
través de metaprogramación de una manera simple y poderosa. La reflexividad de
Smalltalk además \cite{roberts97_arefac} permite utilizar el mismo lenguaje que
se está modificando para modificarlo, no es necesario un metalenguaje
intermedio.  Smalltalk ya ha probado ser \cite{roberts97_arefac} una buen campo
de experimentación para refactorings.


** ¿Por qué CuisUniversity?

Cuis \cite{cuis} es un entorno enfocado en Smalltalk-80 libre y Open
Source. Está basado en la OpenSmalltalk VM \cite{opensmalltalk}, como Squeak, y
su principal objetivo es mantener su base pequeña y simple. CuisUniversity
\cite{cuisuniv} es un ambiente basado en Cuis creado con el objetivo de enseñar
programación orientada a objetos. Actualmente, es utilizado en la Universidad de
Buenos Aires, en la Universidad de Quilmes y en la Universidad Católica
Argentina. Uno de los objetivos de este trabajo es permitir a los alumnos
experimentar con este tipo de refactorings.


** ¿Por qué Introduce Null Object y Extract Method To Method Object?

Luego de analizar varios refactorings de alto nivel, la mayoría variaciones de
patrones de diseño, nos enfocamos en estos dos porque creemos que presentan un
buen balance de abstracción y simplicidad. Son lo suficientemente abstractos
para ser considerados de alto nivel, no son refactorings simples que ya estén
presentes en otras IDEs ni manipulan elementos diminutos como un nombre ya que
operan al nivel de diseño del código. Sin embargo, son más simples que otros, lo
cual nos permitirá explorar y aprender para poder sentar la bases hacia
refactorings futuros. El Introduce Null Object es un caso particular de
Introduce Special Case y de Replace If With Polymorphism, por lo tanto
consideramos que es un buen precursor de ellos. De la misma forma, Extract
Method To Method Object es un precursor de todos los refactorings que requieren
extraer código y hacer reemplazos contextuales.


** Manipulación de código

Los dos refactorings implementados deben generar nuevo código fuente o modificar
código fuente existente y luego compilarlo en determinadas clases. Las dos
formas que consideramos para operar con el códgio fueron:

- Operar directamente con los ~String~ del código fuente ya sea para modificar
  el código fuente de un ~CompiledMethod~ o para generar el de uno
  nuevo. Parecía más simple pero con un modelo nulo. En lugar de representar las
  transformaciones con objetos deberíamos realizarlas como transformaciones de
  texto.

- Obtener el AST del código fuente original, modificarlo y luego traducir el AST
  transformado al código correspondiente o en el caso de un método nuevo generar
  el AST y luego transformarlo al código correspondiente.

Cuis tiene una jerarquía de objetos que representan los posibles nodos de un AST
pero la construcción del árbol es realizada por el ~Parser~ a partir de un
código fuente ya existente. Ese modelo del AST no incluye la posibilidad de
relizarle modificaciones al mismo para luego generar un nuevo código fuente. Por
lo tanto, se decidió utilizar el modelo del AST para casos específicos en los
cuales se podía reutilizar alguna funcionalidad incluida en él pero para la
generación de nuevos métodos y modificaciones a códigos ya existentes se trabajó
siempre directamente con el código fuente y su representación como
~String~. Esta decisión en retrospectiva parece acertada.
