:INTENT:
Información necesaria que puedan necesitar los lectores para entender la tesis.
:END:

Smalltalk es un lenguaje de programación con tipado dinámico y
reflexivo. Además, Smalltalk es un entorno de desarrollo gráfico e interactivo,
provisto por un entorno vivo de objetos. Todo en Smalltalk es un objeto, uno de
los pocos conceptos en los que se basa:

- Objeto :: Representa un componente del sistema. Consiste en una porción de
            memoria privada y un conjunto de operaciones. La memoria privada
            contiene un conjunto de objetos que solo él puede acceder llamados
            variables de instancia o colaboradores internos.

- Mensaje :: Es un pedido que se le realiza a un objeto para que realice una de
             sus operaciones. El conjunto de mensajes que un objeto sabe
             responder se conoce como la interfaz o protocolo que éste tiene con
             el resto del sistema. Éste conjunto está determinado por su clase.

- Clase :: Describe la implementación, la forma de su memoria privada y cómo
           llevan a cabo sus operaciones, de un conjunto de objetos que
           representan el mismo tipo de componente en el sistema. Los objetos de
           una clase se llaman sus instancias y métodos las descripciones de
           cómo realizar las operaciones.

Los métodos de una clase tienen acceso a 5 tipos de variables que difieren en su
scope, los contextos desde los cuáles son accesibles, y su ciclo de vida:

- Variables que sólo puede acceder un solo objeto

  - Variables de instancia: son variables privadas, solo son accesibles por el
    objeto al que pertenecen y son destruidas junto con él.

  - Variables temporales: son creadas y están disponibles durante desarrollo de
    una actividad específica, por ejemplo la evaluación de un método o un bloque.

- Variables que pueden acceder múltiples objetos

  - Variables de clase: son compartidas por todas las instancias de una misma
    clase.
    
  - Variables de pool: son compartidas por un subconjunto de clases del sistema.
  
  - Variables globales: son compartidas por todos los objetos del sistema.
 
    
Una pseudo-variable es un identificador que se refiere a un objeto, como el
nombre de una variable. La diferencia con las variables es que su valor no puede
ser modificado mediantes una asignación. Tres importantes pseudo-variables que
siempre referencian a los mismos objetos son:

- nil :: referencia al objeto que referencian las variables no inicializadas. En
         Cuis pertenece a la clase ~UndefinedObject~.

- true :: referencia al objeto que representa el valor booleano verdadero.

- false :: referencia al objeto que representa el valor booleano falso.

	   

Justificación del problema y solución

- qué es una metaclase
- cómo funciona el method lookup, cuál es la diferencia entre self y super

ETMO

- Qué es el ParseNodeVisitor y para qué se usa?
- Qué es un return self implicito?
- Qué es el Encoder? Por qué es subclase de ParseNode?
- Qué es una shared variable? Por qué los LiteralVariableNode se corresponden
  con este tipo de variables?
- Qué es el Scanner y para qué se usa en el package Refactoring?
- Qué es shadowing?
- OrderedCollection
- Association
- Interval

Interfaz de usuario

- BrowserWindow
- world
- qué es un model en el contexto de morph
- qué es un layout morph, qué es un layout spec

  
INO

- Qui est un identifier? ~Scanner>>scanFieldNames~
