* Justificación
** ¿Por qué refactorings automáticos de alto nivel?

:SECTION_GOAL:
Preguntas guía
  - Cuál es el potencial de los refactorings automáticos de alto nivel
  - Por qué creemos que son una buena herramienta

Por qué refactorings
:END:

Los refactorings son una herramienta esencial del arsenal de los ingenieros de
software para minimzar el incremento de la complejidad del software y así
preservar su mantenibilidad. Sin embargo, los beneficios de los refactorings
conllevan riesgos y costos. Veamos cómo las herramientas que automatizan parte
de su realización ayudan a reducirlos:

- Introducir bugs :: Los refactorings automáticos permiten reducir el riesgo de
     introducir bugs porque las herramientas que los aplican recibieron más
     tiempo de desarrollo, testeo y consideración que la que cualquier
     desarrollador puede dedicar a la hora de realizar un refactoring
     manual. Además, cuentan con varias ventajas sobre la aplicación manual:

  - cuanto más se usan mejores se vuelven: los errores que encuentren los
    usuarios se pueden arreglar para converger a través del tiempo a que se
    preserve el comportamiento con una probabilidad altísima. Los programadores
    pueden cometer el mismo error repetidas veces; algo que contribuye a esto es
    que la experiencia de los programadores trabajando en el proyecto puede
    variar y el tiempo que hayan pasado trabajando en ese proyecto en particular
    también.

  - no son afectadas por el contexto: los refactorings manuales son realizados
    por desarrolladores a los cuales los puede afectar el cansancio, el estrés,
    el apuro, etc. factores que aumentan la probabilidad de equivocación u
    olvido en un tarea tediosa y demandante de atención al detalle como ésta.

- Tiempo de desarrollo :: La aplicación de refactorings es parte de el tiempo de
     desarrollo de un proyecto de software. Al utilizar herramientas automáticas
     para aplicarlos el tiempo invertido en realizarlos se ve disminuido porque
     una herramienta automática es más veloz que un humano, si esto no fuera así
     la herramienta es inútil.  Esto representa una gran ganancia ya que el
     mantenimiento de un sistema es su mayor costo, si este costo se disminuye
     se abarataría la producción de software, y, considerando la omnipresencia
     actual del mismo, la herramienta tendría un impacto enorme en la sociedad.

- Reducir la calidad del sistema :: Toda modificación o extensión tiene el
     riesgo de reducir la calidad del sistema, incluso aquellas que no modifican
     el comportamiento del sistema, como es el caso de los refactorings. Al no
     contar con métricas definitivas para evaluar la calidad de un sistema no es
     simple ver si efectivamente los refactorings automáticos mitigarían el
     riesgo de bajar la calidad del sistema. Sin embargo, existen
     consideraciones que nos llevan a intuir que este puede ser el caso.
     :REFERENCE:
     al que decía que con refactorings de patrones iban a poder probar más diseños
     :END:
     UNA REF postula que si los desarrolladores contaran con buenas herramientas
     automáticas para realizar refactorings de alto nivel probarían más opciones
     de diseño, lo cual les permitiría llegar a mejores diseños. No es
     concluyente, pero si ciertas herramientas aportan a que los desarrolladores
     lleguen a mejores diseños tienen una buena chance de aumentar la calidad de
     los sistemas.

Los refactorings automáticos de alto nivel cuentan con el potencial de maximizar
estos beneficios porque el scope de automatización sería mayor. Al reemplazar
más trabajo manual consigue que se ahorre más tiempo de desarrollo y reduce aún
más la posibilidad de introducir bugs.  Además, operar a un nivel de abstracción
superior, más cercano al nivel de la semántica del pensamiento del programador,
aumentaría la velocidad a la que puede probar diseños alternativos y así llegar
a uno mejor.

:REFERENCE:
A survey of Software Refactoring
:END:
[La referencia] concluye que los refactorings automáticos de alto nivel son más
escalables y performantes. También que los refactorings automáticos aumentan la
velocidad de desarrollo, resultando en una reducción de costos y un aumento de
la calidad del software porque los desarrolladores tienen la posibilidad de
probar más cambios con menos esfuerzo.

Al explorar refactorings de alto nivel surge la pregunta de cuán alto es
convienente subir.
:REFERENCE:
(Refactoring Object-Oriented Frameworks)
:END:
(Refactoring Object-Oriented Frameworks) expone dos objetivos
de los refactorings automáticos que se contraponen. Un objetivo es que el
refactoring sea expresivo, que su nivel sea lo más alto posible para mantener al
usuario lo más lejos posible de toda la complejidad que implica realizar el
cambio, y el otro es que preserve el comportamiento. Cuanto más alto es su nivel
más difícil es justificar que preservan el comportamiento del programa, por lo
tanto queremos que los refactorings sean suficientemente pequeños para poder
tener una buena confianza de que preservan el comportamiento y suficientemente
abstractos para que sean útiles.

Este trabajo busca sentar las bases para poder analizar los refactorings
automáticos de alto nivel.

** Investigaciones más cercanas

:REFERENCE:
A Methodology for the Automated Introduction of Design Pattern
:END:
Este paper es similar porque busca implementar un refactoring que introduce un
patrón de diseño. El foco está puesto en la identificación de transformaciones
parciales que permitan reestructurar el programa desde un estado precursor
elegido hasta uno con el patrón aplicado.  Toman este camino porque su principal
objetivo es automatizar la generación de las transformaciones necesarias. Este
objetivo es atractivo pero no necesariamente valioso. Todavía no contamos con la
información necesaria para saber si ese nivel de abstracción es apropiado para
los desarrolladores y si esas transformaciones son generalizables.

:REFERENCE:
% REF
%   - Automated refactoring to the Strategy design pattern
%   - Automated refactoring of super-class method invocations to the Template Method design pattern
%   - Automated refactoring to the Null Object design pattern
:END:
Estos 3 papers implementan la introducción de patrones de diseño de manera
automática en Java. Además, automatizan la identificación de oportunidades para
aplicar el refactoring. La herramienta evalua todo el código, identifica partes
del mismo que se beneficiarían con la aplicación del refactoring y ofrece
aplicarlo.
:REFERENCE:
a programmer-friendly refactoring tools
:END:
Los dos problemas principales que se pueden encontrar son que el
nivel de automatización no se ajusta a las prácticas actuales de desarrollo y
que las restricciones impuestas al código precursor para poder aplicar el
refactoring son demasiado estrictas, perdiéndose así un gran número de casos.

* Valor de realizar este trabajo

El objetivo de este trabajo es implementar refactorings automáticos de
alto nivel para:

- Entender mejor sus limitaciones en relación a los atributos en
  contraposición (correlación negativa) expresividad y precisión.

- Analizar los desafíos que encontremos para guiar desarrollos futuros.

- Contar con una primera herramienta que nos permita medir, analizar y
  evaluar cómo se relaciona el programador con la misma y cómo podría
  mejorarse para maximizar su productividad.

Se necesitan implementaciones de refactorings de este tipo para poder
evaluar sus potenciales beneficios y así poder mejorar las herramientas
que los aplican. Las IDEs más utilizadas y poderosas no proveen
actualmente refactorings automáticos de este tipo, los disponibles son
más simples. Vemos en esto una oportunidad de mejora y una necesidad de
crecimiento grande.

Orientamos esta herramienta a la automatización de la aplicación del
refactoring porque el principal problema que vemos con las herramientas
que automatizan más etapas es que no requieren intervención del
programador. Ésto, como ya vimos, no se ajustan a su forma de trabajo lo
cual lleva a que ese tipo de herramientas corran dos riesgos:

- Baja frecuencia de uso :: Nadie los usaría ya que asumen que son parte
  de una etapa del desarrollo que no existe.

- Incrementar los costos de un proyecto :: El problema es que si el
  refactoring toma decisiones buenas en ciertas dimensiones de calidad,
  pero que perjudican la mantenibilidad del código por hacerlo más
  complejo o menos entendible, como luego el proyecto lo tienen que
  seguir interviniendo programadores humanos cada vez les tomará más
  tiempo realizarle modificaciones; lo cual resultará en un incremento
  del tiempo de desarrollo.

Mientras no haya una manera precisa de expresar comprensibilidad y
diseño del dominio la intervención humana será necesaria y proveerá una
reducción de costos mayor que la utilización de refactorings
:REFERENCE:
la survey que decía que el 80% del costo del software es mantenimiento
:END:
completamente automáticos.
